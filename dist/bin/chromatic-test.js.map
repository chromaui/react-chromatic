{"version":3,"sources":["../../src/bin/chromatic-test.js"],"names":["process","env","NODE_ENV","option","parse","argv","findOption","storybookScript","shortName","longName","parts","split","index","indexOf","Error","storybookOptions","storybookAddon","appPath","packageJson","resolve","scriptName","scripts","port","console","log","error","exit","commanderOptions","config","appCode","exitZeroOnChanges","verbose","debug","createTunnel","indexUrl","originalArgv","combine","obj1","obj2","ret","forEach","obj","filter","key","undefined","commandLineOptions","exitCode","executeTest"],"mappings":"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","file":"chromatic-test.js","sourcesContent":["\n\nimport commander from 'commander';\nimport path from 'path';\nimport { readFileSync } from 'jsonfile';\n\nimport runTest from '../tester';\n\n// Ensure NODE_ENV is set\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'test';\n\ncommander\n  .option('-a, --app-code [code]', 'the code for your app, get from chromaticqa.com')\n  .option(\n    '-s, --script-name [name]',\n    'How to start your app. Set to none if your app is already running.'\n  )\n  .option('-p, --port [port]', 'What port does your app serve?')\n  .option('--app-path [path]', \"Do we need to access a different path (instead of '/')?\")\n  .option('--storybook-addon', 'Autodetect config for storybook addon setup', false)\n  .option(\n    '--exit-zero-on-changes',\n    \"Use a 0 exit code if changes are detected (i.e. don't stop the build)\",\n    false\n  )\n  .option('--debug', 'Output more debugging information', false)\n  .option('--create-tunnel [boolean]', 'tunnel the service over the internet (default true)', true)\n  .option('--index-url [url]', 'index to connect to')\n  .parse(process.argv);\n\nfunction findOption(storybookScript, shortName, longName) {\n  const parts = storybookScript.split(/[\\s+|=]/);\n  let index = parts.indexOf(longName);\n  if (index === -1) {\n    index = parts.indexOf(shortName);\n  }\n  if (index === -1) {\n    throw new Error(\n      `Didn't find storybook option: ${shortName}/${longName} in '${storybookScript}'`\n    );\n  }\n  return parts[index + 1];\n}\n\nlet storybookOptions = {};\nif (commander.storybookAddon) {\n  storybookOptions = {\n    appPath: '/iframe.html',\n  };\n\n  const packageJson = readFileSync(path.resolve('./package.json'));\n  const scriptName = commander.scriptName || 'storybook';\n  const storybookScript = packageJson.scripts && packageJson.scripts[scriptName];\n\n  if (storybookScript) {\n    const port = commander.port || findOption(storybookScript, '-p', '--port');\n\n    storybookOptions = {\n      ...storybookOptions,\n      scriptName,\n      port,\n    };\n\n    // eslint-disable-next-line no-console\n    console.log(\n      `Chromatic Tester: Detected '${scriptName}' script, running with inferred options:\n  --script-name=${scriptName} --port=${port} --app-path=/iframe.html\nOverride any of the above if they were inferred incorrectly.\n`\n    );\n  } else {\n    // eslint-disable-next-line no-console\n    console.error(\n      `Chromatic Tester: Didn't find a script called '${scriptName}' in your \\`package.json\\`.\\n` +\n        'Make sure you set the `--script-name` option to the value of the npm script that starts your storybook'\n    );\n    process.exit(255);\n  }\n}\n\nconst commanderOptions = {\n  config: commander.config,\n  appCode: commander.appCode,\n  scriptName: commander.scriptName,\n  port: commander.port,\n  appPath: commander.appPath,\n  exitZeroOnChanges: commander.exitZeroOnChanges,\n  verbose: commander.debug,\n  createTunnel: commander.createTunnel !== 'false',\n  indexUrl: commander.indexUrl,\n  originalArgv: process.argv,\n};\n\n// We want the user's options to win, but not if they are undefined!\n//   (That's what Object.assign would do)\nfunction combine(obj1, obj2) {\n  const ret = {};\n\n  [obj1, obj2].forEach(obj => {\n    Object.keys(obj)\n      .filter(key => obj[key] !== undefined)\n      .forEach(key => {\n        ret[key] = obj[key];\n      });\n  });\n\n  return ret;\n}\n\n(async function executeTest() {\n  try {\n    const commandLineOptions = combine(storybookOptions, commanderOptions);\n    const exitCode = await runTest(commandLineOptions);\n    process.exit(exitCode);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    // Not sure what exit code to use but this can mean error.\n    process.exit(255);\n  }\n})();\n"]}