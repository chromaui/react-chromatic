{"version":3,"sources":["../../src/bin/chromatic-test.js"],"names":["process","env","NODE_ENV","option","parse","argv","findOption","storybookScript","shortName","longName","parts","split","index","indexOf","Error","storybookOptions","storybookAddon","appPath","packageJson","resolve","scriptName","scripts","port","configDir","e","message","match","console","log","error","exit","commandLineOptions","config","appCode","createTunnel","indexUrl","then","code","catch"],"mappings":"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","file":"chromatic-test.js","sourcesContent":["\n\nimport commander from 'commander';\nimport path from 'path';\nimport { readFileSync } from 'jsonfile';\n\nimport runTest from '../tester';\n\n// Ensure NODE_ENV is set\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'test';\n\ncommander\n  .option('-a, --app-code [code]', 'the code for your app, get from chromaticqa.com')\n  .option(\n    '-s, --script-name [name]',\n    'How to start your app. Set to none if your app is already running.'\n  )\n  .option('-p, --port [port]', 'What port does your app serve?')\n  .option('--app-path [path]', \"Do we need to access a different path (instead of '/')?\", '/')\n  .option('--storybook-addon', 'Autodetect config for storybook addon setup', false)\n  .option('--create-tunnel [boolean]', 'tunnel the service over the internet (default true)', true)\n  .option('--index-url [url]', 'index to connect to')\n  .parse(process.argv);\n\nfunction findOption(storybookScript, shortName, longName) {\n  const parts = storybookScript.split(/[\\s+|=]/);\n  let index = parts.indexOf(longName);\n  if (index === -1) {\n    index = parts.indexOf(shortName);\n  }\n  if (index === -1) {\n    throw new Error(\n      `Didn't find storybook option: ${shortName}/${longName} in '${storybookScript}'`\n    );\n  }\n  return parts[index + 1];\n}\n\nlet storybookOptions = {};\nif (commander.storybookAddon) {\n  storybookOptions = {\n    appPath: '/iframe.html',\n  };\n\n  const packageJson = readFileSync(path.resolve('./package.json'));\n  const scriptName = commander.scriptName || 'storybook';\n  const storybookScript = packageJson.scripts && packageJson.scripts[scriptName];\n\n  if (storybookScript) {\n    const port = findOption(storybookScript, '-p', '--port');\n\n    let configDir = './.storybook';\n    try {\n      configDir = findOption(storybookScript, '-c', '--config-dir');\n    } catch (e) {\n      if (e.message.match('find storybook option')) {\n        // eslint-disable-next-line no-console\n        console.log(`Chromatic Tester: ${e.message}, using default ('${configDir}')`);\n      } else {\n        throw e;\n      }\n    }\n\n    storybookOptions = {\n      ...storybookOptions,\n      scriptName,\n      port,\n    };\n\n    // eslint-disable-next-line no-console\n    console.log(\n      `Chromatic Tester: Detected '${scriptName}' script, running on port ${port} and with config dir '${configDir}'`\n    );\n  } else {\n    // eslint-disable-next-line no-console\n    console.error(\n      `Chromatic Tester: Didn't find a script called '${scriptName}' in your \\`package.json\\`.\\n` +\n        'Make sure you set the `--script-name` option to the value of the npm script that starts your storybook'\n    );\n    process.exit(255);\n  }\n}\n\nconst commandLineOptions = {\n  config: commander.config,\n  appCode: commander.appCode,\n  scriptName: commander.scriptName,\n  port: commander.port,\n  appPath: commander.appPath,\n  createTunnel: commander.createTunnel !== 'false',\n  indexUrl: commander.indexUrl,\n  ...storybookOptions,\n};\n\nrunTest(commandLineOptions)\n  .then(code => process.exit(code))\n  .catch(e => {\n    // eslint-disable-next-line no-console\n    console.error(e);\n    // Not sure what exit code to use but this can mean error.\n    process.exit(255);\n  });\n"]}